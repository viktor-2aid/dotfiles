(undo-tree-save-format-version . 1)
"5c983a61ba1521764f3657999b24d7c910571451"
[nil nil nil nil (26652 44890 130771 330000) 0 nil]
([nil nil ((#("{
  config,
  pkgs,
  lib,
  ...
}: {
  programs.neovim = {
    enable = true;

    # Enable viAlias and vimAlias if you want
    viAlias = true;
    vimAlias = true;

    # Install plugins
    plugins = with pkgs.vimPlugins; [
      gruvbox

      # Tree-sitter for advanced syntax highlighting and more
      nvim-treesitter
      nvim-treesitter-textobjects # For text objects based on Tree-sitter, e.g., functions, loops
      # Optional: nvim-treesitter-context (shows current code context at top of window)
      # If you find 'nasm-vim' or a similar dedicated syntax file later and prefer it,
      # you could add it here, but Tree-sitter is generally more advanced.
    ];

    extraLuaConfig = ''
      -- Enable loader and set basic options
      vim.loader.enable()
      vim.opt.termguicolors = true
      vim.g.gruvbox_invert_selection = 0
      vim.cmd.colorscheme(\"gruvbox\")

      -- Window style configuration
      local WINDOW_STYLE = {
        border = 'single',
        style = 'minimal',
        winhighlight = 'Normal:NormalFloat,FloatBorder:FloatBorder'
      }

      -- Set highlights
      local function set_highlights()
        local highlights = {
          Normal = { bg = '#0f1112' },
          Visual = { bold = false, bg = '#22272b' },
        }

        for group, settings in pairs(highlights) do
          vim.api.nvim_set_hl(0, group, settings)
        end
      end

      set_highlights()

      -- Set various options
      local options = {
        mouse = \"\",
        number = true,
        guicursor = \"n-v-c-i:block\",
        relativenumber = true,
        updatetime = 300,
        completeopt = \"menu,menuone,noselect\",
        autochdir = true
      }

      for k, v in pairs(options) do
        vim.opt[k] = v
      end

      -- Define keymaps function
      local function set_keymaps()
        -- Other mappings
        local maps = {
          { mode = 'n', lhs = 'y', rhs = '\"+y' },
          { mode = 'v', lhs = 'y', rhs = '\"+y' },
          { mode = 'v', lhs = 'x', rhs = '\"+x' },
          { mode = 'n', lhs = '<A-l>', rhs = '<Esc>l' },
          { mode = 'n', lhs = 'p', rhs = '\"+p' },
          { mode = 'n', lhs = '<Esc>', rhs = ':noh<CR><Esc>' },
        }

        for _, map in ipairs(maps) do
          vim.keymap.set(map.mode, map.lhs, map.rhs, { noremap = true, silent = true })
        end
      end

      set_keymaps()

      -------------------------------------------------------------------------
      -- START: NASM specific indentation configuration
      -------------------------------------------------------------------------
      -- Create an autocommand group for NASM settings.
      vim.api.nvim_create_augroup(\"NasmIndentSettings\", { clear = true })

      -- Autocommand to apply settings when opening .asm files
      -- This will primarily handle turning off unwanted default auto-indentation.
      vim.api.nvim_create_autocmd({\"BufNewFile\", \"BufRead\"}, {
        pattern = {\"*.asm\", \"*.nasm\"}, -- Apply to files ending in .asm or .nasm
        group = \"NasmIndentSettings\",
        callback = function()
          vim.opt_local.autoindent = false
          vim.opt_local.smartindent = false
          vim.opt_local.cindent = false
          vim.opt_local.indentexpr = \"\"
          -- vim.notify(\"NASM: Basic auto-indent disabled.\", vim.log.levels.INFO, {title = \"Neovim\"})
        end,
      })
      -------------------------------------------------------------------------
      -- END: NASM specific indentation configuration
      -------------------------------------------------------------------------

      -------------------------------------------------------------------------
      -- START: nvim-treesitter configuration
      -------------------------------------------------------------------------
      -- We need to defer the setup of nvim-treesitter until after plugins are loaded.
      -- A common way is to use a VimEnter autocommand or check if the plugin is available.
      -- However, with NixOS module system, plugins are generally available when this Lua code runs.
      -- If you encounter issues, you might need to wrap this in vim.defer_fn or an event.
      pcall(function() -- Use pcall for safety in case the plugin isn't loaded as expected
        require'nvim-treesitter.configs'.setup {
          -- A list of parser names, or \"all\".
          -- Add \"nasm\" to ensure its parser is installed.
          -- Other common parsers like \"c\", \"lua\", \"python\", \"rust\", \"go\", \"javascript\", \"typescript\", \"html\", \"css\", \"json\", \"yaml\", \"markdown\" can be added.
          ensure_installed = {
            \"c\", \"lua\", \"vim\", \"vimdoc\", \"query\", -- Base parsers often good to have
            \"nasm\"                               -- Add NASM here!
          },

          -- Install parsers synchronously (only applied to `ensure_installed`)
          sync_install = false, -- true will block Neovim until parsers are installed

          -- Automatically install missing parsers when entering a buffer
          -- Recommendation: set to false if you don't have `tree-sitter` CLI installed locally
          -- and rely on Nix to provide them (though ensure_installed should handle it).
          -- If true, it might try to download and compile parsers.
          auto_install = true,

          highlight = {
            enable = true, -- Enable syntax highlighting
            -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
            -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
            -- Using this option may slow down your editor, and you may see some duplicate highlights.
            -- Instead of true it can also be a list of languages
            additional_vim_regex_highlighting = false,
          },

          indent = {
            enable = false, -- Set to true to enable tree-sitter based indentation for supported languages
                           -- Test this with NASM; if it works well, enable it. Otherwise, keep false for manual indent.
          },

          textobjects = { -- Configuration for nvim-treesitter-textobjects
            select = {
              enable = true,
              lookahead = true, -- Automatically jump forward to textobj, similar to targets.vim
              keymaps = {
                -- You can use the capture groups defined in textobjects.scm
                [\"af\"] = \"@function.outer\",
                [\"if\"] = \"@function.inner\",
                [\"ac\"] = \"@class.outer\",
                [\"ic\"] = \"@class.inner\",
                -- Add more text objects as needed, e.g. for comments, parameters
                -- [\"a;\"] = \"@comment.outer\", -- Example for comments if parser supports it
              },
            },
            move = {
              enable = true,
              set_jumps = true, -- whether to set jumps in the jumplist
              goto_next_start = {
                [\"]m\"] = \"@function.outer\",
                [\"]]\"] = \"@class.outer\",
              },
              goto_next_end = {
                [\"]M\"] = \"@function.outer\",
                [\"][\"] = \"@class.outer\",
              },
              goto_previous_start = {
                [\"[m\"] = \"@function.outer\",
                [\"[[\"] = \"@class.outer\",
              },
              goto_previous_end = {
                [\"[M\"] = \"@function.outer\",
                [\"[]\"] = \"@class.outer\",
              },
            },
          },
          -- Other modules can be configured here, e.g., rainbow parentheses, context, etc.
          -- rainbow = {
          --   enable = true,
          --   extended_mode = true, -- Also highlight non-bracket delimiters like `do` and `end`
          --   max_file_lines = nil, -- Do not disable for long files
          -- }
        }
        -- vim.notify(\"nvim-treesitter configured.\", vim.log.levels.INFO, {title = \"Neovim\"})
      end)
      -------------------------------------------------------------------------
      -- END: nvim-treesitter configuration
      -------------------------------------------------------------------------
    '';
  };
}


" 0 40 (fontified t) 40 55 (face nix-attribute-face fontified t) 55 64 (fontified t) 64 70 (face nix-attribute-face fontified t) 70 73 (fontified t) 73 77 (face nix-builtin-face fontified t) 77 84 (fontified t) 84 126 (face font-lock-comment-face fontified t) 126 130 (fontified t) 130 137 (face nix-attribute-face fontified t) 137 140 (fontified t) 140 144 (face nix-builtin-face fontified t) 144 150 (fontified t) 150 158 (face nix-attribute-face fontified t) 158 161 (fontified t) 161 165 (face nix-builtin-face fontified t) 165 172 (fontified t) 172 190 (face font-lock-comment-face fontified t) 190 194 (fontified t) 194 201 (face nix-attribute-face fontified t) 201 204 (fontified t) 204 208 (face nix-keyword-face fontified t) 208 249 (fontified t) 249 305 (face font-lock-comment-face fontified t) 305 361 (fontified t) 361 425 (face font-lock-comment-face fontified t) 425 431 (fontified t) 431 513 (face font-lock-comment-face fontified t) 513 519 (fontified t) 519 600 (face font-lock-comment-face fontified t) 600 606 (fontified t) 606 675 (face font-lock-comment-face fontified t) 675 687 (fontified t) 687 701 (face nix-attribute-face fontified t) 701 704 (fontified t) 704 705 (face font-lock-string-face nix-string-type 39 syntax-table (15) fontified t) 705 1500 (face font-lock-string-face fontified t) 1500 1504 (face font-lock-string-face fontified t) 1504 7571 (fontified nil) 7571 8133 (face font-lock-string-face fontified t) 8133 8134 (face font-lock-string-face nix-string-type 39 syntax-table (15) fontified t) 8134 8145 (fontified t)) . 1) (undo-tree-id13 . -7724) (undo-tree-id14 . -8144) (t 26652 44204 963998 706000)) nil (26652 44890 130770 480000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5516 . 5517) (nil fontified nil 1 . 5517) (1 . 5517) (1 . 2)) nil (26652 44890 130768 853000) 0 nil])
([nil nil ((#("{
  config,
  pkgs,
  lib,
  ...
}: {
  programs.neovim = {
    enable = true;

    viAlias = true;
    vimAlias = true;

    plugins = with pkgs.vimPlugins; [
      gruvbox

      # Tree-sitter for advanced syntax highlighting and more
      nvim-treesitter
      nvim-treesitter-textobjects

      # Add the specific Tree-sitter parser for NASM
      nvim-treesitter-parsers.nasm
      # You can add other parsers here as needed, e.g.:
      # nvim-treesitter-parsers.c
      # nvim-treesitter-parsers.lua
      # nvim-treesitter-parsers.python
    ];

    extraLuaConfig = ''
      -- Enable loader and set basic options
      vim.loader.enable()
      vim.opt.termguicolors = true
      vim.g.gruvbox_invert_selection = 0
      vim.cmd.colorscheme(\"gruvbox\")

      -- Window style configuration
      local WINDOW_STYLE = {
        border = 'single',
        style = 'minimal',
        winhighlight = 'Normal:NormalFloat,FloatBorder:FloatBorder'
      }

      -- Set highlights
      local function set_highlights()
        local highlights = {
          Normal = { bg = '#0f1112' },
          Visual = { bold = false, bg = '#22272b' },
        }

        for group, settings in pairs(highlights) do
          vim.api.nvim_set_hl(0, group, settings)
        end
      end

      set_highlights()

      -- Set various options
      local options = {
        mouse = \"\",
        number = true,
        guicursor = \"n-v-c-i:block\",
        relativenumber = true,
        updatetime = 300,
        completeopt = \"menu,menuone,noselect\",
        autochdir = true
      }

      for k, v in pairs(options) do
        vim.opt[k] = v
      end

      -- Define keymaps function
      local function set_keymaps()
        local maps = {
          { mode = 'n', lhs = 'y', rhs = '\"+y' },
          { mode = 'v', lhs = 'y', rhs = '\"+y' },
          { mode = 'v', lhs = 'x', rhs = '\"+x' },
          { mode = 'n', lhs = '<A-l>', rhs = '<Esc>l' },
          { mode = 'n', lhs = 'p', rhs = '\"+p' },
          { mode = 'n', lhs = '<Esc>', rhs = ':noh<CR><Esc>' },
        }

        for _, map in ipairs(maps) do
          vim.keymap.set(map.mode, map.lhs, map.rhs, { noremap = true, silent = true })
        end
      end

      set_keymaps()

      -------------------------------------------------------------------------
      -- START: NASM specific indentation configuration
      -------------------------------------------------------------------------
      vim.api.nvim_create_augroup(\"NasmIndentSettings\", { clear = true })
      vim.api.nvim_create_autocmd({\"BufNewFile\", \"BufRead\"}, {
        pattern = {\"*.asm\", \"*.nasm\"},
        group = \"NasmIndentSettings\",
        callback = function()
          vim.opt_local.autoindent = false
          vim.opt_local.smartindent = false
          vim.opt_local.cindent = false
          vim.opt_local.indentexpr = \"\"
        end,
      })
      -------------------------------------------------------------------------
      -- END: NASM specific indentation configuration
      -------------------------------------------------------------------------

      -------------------------------------------------------------------------
      -- START: nvim-treesitter configuration
      -------------------------------------------------------------------------
      pcall(function()
        require'nvim-treesitter.configs'.setup {
          -- This list tells nvim-treesitter which parsers to *use*.
          -- NixOS will provide the actual parser files.
          ensure_installed = {
            \"c\", \"lua\", \"vim\", \"vimdoc\", \"query\", -- Base/common parsers
            \"nasm\"                               -- Tell it to use the NASM parser
          },

          -- CRITICAL FOR NIXOS: Prevent nvim-treesitter from trying to install parsers itself.
          sync_install = false,
          auto_install = false, -- This MUST be false on NixOS to avoid write errors to /nix/store

          highlight = {
            enable = true,
            additional_vim_regex_highlighting = false,
          },

          indent = {
            enable = false, -- Keep false unless you find Tree-sitter indent for NASM works well
          },

          textobjects = {
            select = {
              enable = true,
              lookahead = true,
              keymaps = {
                [\"af\"] = \"@function.outer\",
                [\"if\"] = \"@function.inner\",
                [\"ac\"] = \"@class.outer\",
                [\"ic\"] = \"@class.inner\",
              },
            },
            move = {
              enable = true,
              set_jumps = true,
              goto_next_start = {
                [\"]m\"] = \"@function.outer\",
                [\"]]\"] = \"@class.outer\",
              },
              goto_next_end = {
                [\"]M\"] = \"@function.outer\",
                [\"][\"] = \"@class.outer\",
              },
              goto_previous_start = {
                [\"[m\"] = \"@function.outer\",
                [\"[[\"] = \"@class.outer\",
              },
              goto_previous_end = {
                [\"[M\"] = \"@function.outer\",
                [\"[]\"] = \"@class.outer\",
              },
            },
          },
        }
        -- vim.notify(\"nvim-treesitter configured.\", vim.log.levels.INFO, {title = \"Neovim\"})
      end)
      -------------------------------------------------------------------------
      -- END: nvim-treesitter configuration
      -------------------------------------------------------------------------
    '';
  };
}

" 0 40 (fontified t) 40 55 (face nix-attribute-face fontified t) 55 64 (fontified t) 64 70 (face nix-attribute-face fontified t) 70 73 (fontified t) 73 77 (face nix-builtin-face fontified t) 77 84 (fontified t) 84 91 (face nix-attribute-face fontified t) 91 94 (fontified t) 94 98 (face nix-builtin-face fontified t) 98 104 (fontified t) 104 112 (face nix-attribute-face fontified t) 112 115 (fontified t) 115 119 (face nix-builtin-face fontified t) 119 126 (fontified t) 126 133 (face nix-attribute-face fontified t) 133 136 (fontified t) 136 140 (face nix-keyword-face fontified t) 140 181 (fontified t) 181 237 (face font-lock-comment-face fontified t) 237 300 (fontified t) 300 347 (face font-lock-comment-face fontified t) 347 388 (fontified t) 388 438 (face font-lock-comment-face fontified t) 438 444 (fontified t) 444 472 (face font-lock-comment-face fontified t) 472 478 (fontified t) 478 508 (face font-lock-comment-face fontified t) 508 514 (fontified t) 514 547 (face font-lock-comment-face fontified t) 547 559 (fontified t) 559 573 (face nix-attribute-face fontified t) 573 576 (fontified t) 576 577 (face font-lock-string-face nix-string-type 39 syntax-table (15) fontified t) 577 1500 (face font-lock-string-face fontified t) 1500 1540 (face font-lock-string-face fontified t) 4999 5016 (face font-lock-string-face) 5016 5052 (face font-lock-string-face fontified t) 5052 5506 (face font-lock-string-face fontified t) 5506 5507 (face font-lock-string-face fontified t nix-string-type 39 syntax-table (15)) 5507 5515 (fontified t) 5515 5516 (fontified t rear-nonsticky t) 5516 5517 (fontified t)) . 1) (undo-tree-id0 . -5516) (undo-tree-id1 . -5377) (undo-tree-id2 . 1) (undo-tree-id3 . -5377) (undo-tree-id4 . -5421) (undo-tree-id5 . -5052) (undo-tree-id6 . -5377) (undo-tree-id7 . -5377) (undo-tree-id8 . -5052) (undo-tree-id9 . -5377) (undo-tree-id10 . -5096) (undo-tree-id11 . -5377) (undo-tree-id12 . -5377)) nil (26652 44890 130767 524000) 0 nil])
([nil current ((nil rear-nonsticky nil 6729 . 6730) (nil fontified nil 1 . 6730) (1 . 6730) (1 . 2)) nil (26652 44890 130743 907000) 0 nil])
nil
